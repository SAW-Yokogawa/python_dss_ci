# Form implementation generated from reading ui file 'Gulf Project'
#
# Created by: PyQt6 UI code generator 6.7.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
# importing datetime module
import pandas as pd
import numpy as np
import os
# importing datetime module
from datetime import datetime, timedelta
from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(400, 176)
        self.dateEdit = QtWidgets.QDateEdit(parent=Dialog)
        self.dateEdit.setGeometry(QtCore.QRect(210, 10, 171, 31))
        self.dateEdit.setDateTime(QtCore.QDateTime(
            QtCore.QDate(2024, 1, 1), QtCore.QTime(0, 0, 0)))
        self.dateEdit.setCalendarPopup(True)
        self.dateEdit.setObjectName("dateEdit")
        self.pushButton = QtWidgets.QPushButton(parent=Dialog)
        self.pushButton.setGeometry(QtCore.QRect(210, 50, 56, 17))
        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(parent=Dialog)
        self.label.setGeometry(QtCore.QRect(210, 70, 121, 16))
        self.label.setObjectName("label")
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.dateEdit.setDisplayFormat(_translate("Dialog", "yyyy/MM/dd"))
        self.pushButton.setText(_translate("Dialog", "PushButton"))
        self.label.setText(_translate("Dialog", "TextLabel"))


def my_function_CItime(timenew):
    # CI server format time DD-MM-20YY HH:MM:00.000
    Date_buff = timenew[4]+timenew[5]+"-"+timenew[2] + \
        timenew[3]+"-"+"2"+"0"+timenew[0]+timenew[1]+" "
    Thours = timenew[7]+timenew[8]
    Tmins = timenew[10] + timenew[11]
    # Tsecs = timenew[13]+timenew[14]
    # CI server TIME
    result_buff = Date_buff+Thours+":"+Tmins+":00.000"
    return result_buff


def fillingdate():
    dll_path = os.path.join(os.getenv("TLS_ROOT_PATH"), "tls/exe")
    os.add_dll_directory(dll_path)
    import dss
    x = ui.dateEdit.date()
    Yearnew = x.getDate()
    Yearstr = str(Yearnew[0]-2000)
    Monthstr = str(Yearnew[1])
    Daystr = str(Yearnew[2])
    print(Yearstr+Monthstr+Daystr)
    ui.label.setText(Yearstr+Monthstr+Daystr)
    dll_path = os.path.join(os.getenv("TLS_ROOT_PATH"), "tls/exe")
    os.add_dll_directory(dll_path)
    # Import OS for select DLL path and import dss cannot change/
    # location in this Code #
    date_n = datetime.now()  # last read back 1 days
    print(date_n)
    # 'LOGGER_240508_0000_x.CSV format'
    # Date check
    D = Yearnew[2]
    if (D <= 9):  # type: ignore
        DNEW = "0"+str(D)
    else:
        DNEW = str(D)
    M = Yearnew[1]

    if (M <= 9):  # type: ignore
        MNEW = "0"+str(M)
    else:
        MNEW = str(M)
    #   Y = str(date_n.year-2000)
    # Import OS for select DLL path and import dss cannot change/
    # location in this Code #
    # FUNCTION CI SERVER TIME
    # date_n = datetime.now()-timedelta(days=1)
    # main---------------------'LOGGER_240508_0000_x.CSV     FORMAT #csv_name = "LOGGER_"+"240512_0000_X.CSV"'
    try:
        csv_name = "LOGGER_"+Yearstr+MNEW+DNEW+"_0000.CSV"
        df = pd.read_csv(csv_name, skiprows=[
         0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12])
        # usecols=["#TYPE", "GV.GHI","@GV.HR", "@GV.PIR", "@GV.POA", "@GV.PVT01", "@GV.PVT02", "@GV.PVT03", "@GV.RI","@GV.RPOA01", "@GV.RPOA02", "@GV.RPOA03" "@GV.SRI", "@GV.TI", "@GV.WDIR", "@GV.WSPD"]
        df2 = df.to_numpy()
        # Iterating the index
        # Getting length of list
        new_arr = np.array(df2)
        i = 0
        new_time = []
        HR = []
        PIR = []
        POA = []
        PVT01 = []
        PVT02 = []
        PVT03 = []
        RPOA01 = []
        RPOA02 = []
        RPOA03 = []
        RI = []
        SRI = []
        TI = []
        WDIR = []
        WSPD = []
        GHI = []
        index = []
        # Iterating using while loop
        while i < len(new_arr)-4:
            new_time.append(my_function_CItime((new_arr[i, 0])))
            GHI.append(float(new_arr[i, 1]))
            HR.append(float(new_arr[i, 2]))
            PIR.append(float(new_arr[i, 3]))
            POA.append(float(new_arr[i, 4]))
            PVT01.append(float(new_arr[i, 5]))
            PVT02.append(float(new_arr[i, 6]))
            PVT03.append(float(new_arr[i, 7]))
            RI.append(float(new_arr[i, 8]))
            RPOA01.append(float(new_arr[i, 9]))
            RPOA02 .append(float(new_arr[i, 10]))
            RPOA03.append(float(new_arr[i, 11]))
            SRI.append(float(new_arr[i, 12]))
            TI.append(float(new_arr[i, 13]))
            WDIR.append(float(new_arr[i, 14]))
            WSPD.append(float(new_arr[i, 15]))
            index.append(i)
            i += 1
        print(new_arr.shape)
        print(len(new_arr))
        conn = dss.connect()
        fields = dss.getFieldNames(conn, 'ITEM_HISTORY')
        data_set = dss.openDataset(conn, 'ITEM_HISTORY', [
            'NAME', 'ID_NUMBER', 'ITEM_NAME', 'GROUP_NAME', 'SAMPLE_TIME', 'ITEM_VALUE', 'MODIFIED_VALUE', 'STATUS'], 'ru')
        # CI dss connection
        # Data mapping CSV to Ciserver
        # Format input_buff = "EVENT_EVENT:SB_SPB22.TS021.WMS01_HR/"+"08-05-2024 14:49:00.000"+"/Value"
        print("start Filling data from csv")
        # ------------------1. HR-------------------------------------------------------
        j = 0
        while j < len(new_arr)-4:
            input_buff = "ONE_MINUTE:SB_SPB22.TS021.WMS01_HR/"+new_time[j]+"/Value"
            SAMPLE_TIME_IN = input_buff
            records1 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records1)
            records1['ITEM_VALUE'] = HR[j]
            records1['STATUS'] = 9
            dss.updateRecord(conn, data_set, records1)
            records2 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            j += 1
        print("HR finshed")
        # ------------------2.PIR----------------------------------------------------------------
        j = 0
        while j < len(new_arr)-4:
            input_buff = "ONE_MINUTE:SB_SPB22.TS021.WMS01_PIR/" + \
                new_time[j]+"/Value"
            SAMPLE_TIME_IN = input_buff
            records1 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records1)
            records1['ITEM_VALUE'] = PIR[j]
            records1['STATUS'] = 9
            dss.updateRecord(conn, data_set, records1)
            records2 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            j += 1
        print("PIR finshed")
        # ------------------3.POA-------------------------------------------------------
        j = 0
        while j < len(new_arr)-4:
            input_buff = "ONE_MINUTE:SB_SPB22.TS021.WMS01_POA/" + \
                new_time[j]+"/Value"
            SAMPLE_TIME_IN = input_buff
            records1 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records1)
            records1['ITEM_VALUE'] = POA[j]
            records1['STATUS'] = 9
            dss.updateRecord(conn, data_set, records1)
            records2 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            j += 1
        print("POA finshed")
        # ------------------4.PVT01------------------------------------------------------
        j = 0
        while j < len(new_arr)-4:
            input_buff = "ONE_MINUTE:SB_SPB22.TS021.WMS01_PVT01/" + \
                new_time[j]+"/Value"
            SAMPLE_TIME_IN = input_buff
            records1 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records1)
            records1['ITEM_VALUE'] = PVT01[j]
            records1['STATUS'] = 9
            dss.updateRecord(conn, data_set, records1)
            records2 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records2)
            j += 1
        print("PVT01 finshed")
        # ------------------5.PVT02------------------------------------------------------
        j = 0
        while j < len(new_arr)-4:
            input_buff = "ONE_MINUTE:SB_SPB22.TS021.WMS01_PVT02/" + \
                new_time[j]+"/Value"
            SAMPLE_TIME_IN = input_buff
            records1 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records1)
            records1['ITEM_VALUE'] = PVT02[j]
            records1['STATUS'] = 9
            dss.updateRecord(conn, data_set, records1)
            records2 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records2)
            j += 1
        print("PVT02 finshed")
        # ------------------6.PVT03------------------------------------------------------
        j = 0
        while j < len(new_arr)-4:
            input_buff = "ONE_MINUTE:SB_SPB22.TS021.WMS01_PVT03/" + \
                new_time[j]+"/Value"
            SAMPLE_TIME_IN = input_buff
            records1 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records1)
            records1['ITEM_VALUE'] = PVT03[j]
            records1['STATUS'] = 9
            dss.updateRecord(conn, data_set, records1)
            records2 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records2)
            j += 1
        print("PVT03 finshed")
        # ------------------7.RPOA01------------------------------------------------------
        j = 0
        while j < len(new_arr)-4:
            input_buff = "ONE_MINUTE:SB_SPB22.TS021.WMS01_RPOA01/" + \
                new_time[j]+"/Value"
            SAMPLE_TIME_IN = input_buff
            records1 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records1)
            records1['ITEM_VALUE'] = RPOA01[j]
            records1['STATUS'] = 9
            dss.updateRecord(conn, data_set, records1)
            records2 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records2)
            j += 1
        print("RPOA01 finshed")
        # ------------------8.RPOA02------------------------------------------------------
        j = 0
        while j < len(new_arr)-4:
            input_buff = "ONE_MINUTE:SB_SPB22.TS021.WMS01_RPOA02/" + \
                new_time[j]+"/Value"
            SAMPLE_TIME_IN = input_buff
            records1 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records1)
            records1['ITEM_VALUE'] = RPOA02[j]
            records1['STATUS'] = 9
            dss.updateRecord(conn, data_set, records1)
            records2 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records2)
            j += 1
        print("RPOA02 finshed")
        # ------------------9.RPOA03------------------------------------------------------
        j = 0
        while j < len(new_arr)-4:
            input_buff = "ONE_MINUTE:SB_SPB22.TS021.WMS01_RPOA03/" + \
                new_time[j]+"/Value"
            SAMPLE_TIME_IN = input_buff
            records1 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records1)
            records1['ITEM_VALUE'] = RPOA03[j]
            records1['STATUS'] = 9
            dss.updateRecord(conn, data_set, records1)
            records2 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records2)
            j += 1
        print("RPOA03 finshed")
        # ------------------10.RT_RAIN------------------------------------------------------
        j = 0
        while j < len(new_arr)-4:
            input_buff = "ONE_MINUTE:SB_SPB22.TS021.WMS01_RI/"+new_time[j]+"/Value"
            SAMPLE_TIME_IN = input_buff
            records1 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records1)
            records1['ITEM_VALUE'] = RI[j]
            records1['STATUS'] = 9
            dss.updateRecord(conn, data_set, records1)
            records2 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records2)
            j += 1
        print("RT_RAIN finshed")
        # ------------------11.SRI------------------------------------------------------
        j = 0
        while j < len(new_arr)-4:
            input_buff = "ONE_MINUTE:SB_SPB22.TS021.WMS01_SR/"+new_time[j]+"/Value"
            SAMPLE_TIME_IN = input_buff
            records1 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records1)
            records1['ITEM_VALUE'] = SRI[j]
            records1['STATUS'] = 9
            dss.updateRecord(conn, data_set, records1)
            records2 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records2)
            j += 1
        print("SR finshed")
        # ------------------12.TI------------------------------------------------------
        j = 0
        while j < len(new_arr)-4:
            input_buff = "ONE_MINUTE:SB_SPB22.TS021.WMS01_TI/"+new_time[j]+"/Value"
            SAMPLE_TIME_IN = input_buff
            records1 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records1)
            records1['ITEM_VALUE'] = TI[j]
            records1['STATUS'] = 9
            dss.updateRecord(conn, data_set, records1)
            records2 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records2)
            j += 1
        print("TI finshed")
        # ------------------13.WDIR------------------------------------------------------
        j = 0
        while j < len(new_arr)-4:
            input_buff = "ONE_MINUTE:SB_SPB22.TS021.WMS01_WDIR/" + \
                new_time[j]+"/Value"
            SAMPLE_TIME_IN = input_buff
            records1 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records1)
            records1['ITEM_VALUE'] = WDIR[j]
            records1['STATUS'] = 9
            dss.updateRecord(conn, data_set, records1)
            records2 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records2)
            j += 1
        print("WDIR finshed")
        # ------------------14.WSPD------------------------------------------------------
        j = 0
        while j < len(new_arr)-4:
            input_buff = "ONE_MINUTE:SB_SPB22.TS021.WMS01_WSPD/" + \
                new_time[j]+"/Value"
            SAMPLE_TIME_IN = input_buff
            records1 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records1)
            records1['ITEM_VALUE'] = WSPD[j]
            records1['STATUS'] = 9
            dss.updateRecord(conn, data_set, records1)
            records2 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records2)
            j += 1
        print("WSPD finshed")
        # ------------------15.GHI -- need modify adding-------------------------------
        j = 0
        while j < len(new_arr)-4:
            input_buff = "ONE_MINUTE:SB_SPB22.TS021.WMS01_GHI/" + \
                new_time[j]+"/Value"
            SAMPLE_TIME_IN = input_buff
            records1 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records1)
            records1['ITEM_VALUE'] = GHI[j]
            records1['STATUS'] = 9
            dss.updateRecord(conn, data_set, records1)
            records2 = dss.readEqual(conn, data_set, SAMPLE_TIME_IN)
            # print(records2)
            j += 1
        print("GHI")
        # Finished CI server Script
        print("Finished filling to CI sever")
        ui.label.setText("Finished filling to CI sever")
        dss.close(conn)
        # Close DSS
    except:
        print("No file for update")
        ui.label.setText("No file for updateto to CI sever")
# -------------------------------------MAIN PROGRAM------------------------------


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    ui.pushButton.clicked.connect(fillingdate)
    sys.exit(app.exec())
